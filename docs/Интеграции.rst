==============
**Интеграции**
==============

EDI
---

Основные принципы
~~~~~~~~~~~~~~~~~

Интеграция с ЭДО провайдерами, как уже писалось в других статьях на эту тему, построена на стандартном для микросервиса интеграций механизме - синхронизациях (ECOS Synchronization :ref: `ecos-Synchronization`). Это для нас означает, что у нас есть простой способ управлять состоянием интеграции с конкретным ЭДО провайдером в рамках настроенного ящика в ECOS посредством уже готового функционала (включение/выключение чекбоксами, сброс состояния при необходимости для старта интеграции с самого начала и тд).

Перейдем к описанию самого функционала с указанием классов.

ECOS синхронизации работают на механизме объявления реализации SyncExecutionFactory, которые поставляют реализации SyncExecution, в котором уже происходит шедулинг интеграции.

В нашем случае, за это ответственны классы EdiSyncExecutionFactory и EdiSyncExecution. Работу EdiSyncExecutionFactory рассматривать не будем, так как кроме регистрации в SyncService и создания EdiSyncExecution - никакой работы он и не делает.

Рассмотрим работу EdiSyncExecution:
* Зашедулить джобу по настройкам.
* В джобе - повесить лок с помощью ShedLock. Если смог повесить лок - работа продолжается.
* Собирает данные для интеграции, ищет зарегистрированную для ЭДО-провайдера из настроек ящика реализацию интерфейса EdiEventsSyncService. Если не находит - сыпет исключения. Важно отметить, что реализаций EdiEventsSyncService в самом микросервисе integrations на самом деле нет, как они подключаются будет описано в разделе ниже.
* Делегирует работу найденному EdiEventsSyncService, передавая ему собранные ранее данные + метод-колбек для обновления состояния синхронизации.

То есть, по факту, особой работы EdiSyncExecution не делает, полезная работа выполняется за счет делегирования.

Alfresco Records
----------------

Currency rates
--------------

Message quaue
-------------

.. _ecos-Synchronization:

ECOS Synchronization
--------------------