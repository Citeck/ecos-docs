Рабочее расписание Working Schedule
====================================

Рабочее расписание используется для пяти видов операций:

    1. Добавить рабочее время к определенной дате и времени.
    2. Добавить рабочие дни к определенной дате.
    3. Рассчитать количество рабочих дней между двумя датами.
    4. Рассчитать количество рабочих дней между двумя датами с временем.

Привязка рабочего расписания к пользователю или группе
-------------------------------------------------------

Для привязки рабочего расписания к пользователю или группе нужно создать ассоциацию ``has-working-schedule:schedule``

Настройка рабочего расписания
------------------------------

В системе предусмотрены 2 сущности для настройки работы рабочего расписания.

Производственный календарь
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Эта сущность нужна для формирования списка дат, которые изменяют обычный распорядок рабочих дней.

Журнал: http://localhost/v2/admin?journalId=working-calendar&type=JOURNAL

Атрибуты:

.. list-table:: 
      :widths: 10 10 10
      :header-rows: 1

      * - ID
        - Тип 
        - Описание
      * - id
        - String 
        - Идентификатор.
      * - extensionFor
        - EntityRef 
        - Ссылка на календарь, который мы расширяем своей конфигурацией.
      * - from
        - LocalDate
        - Дата начала действия календаря.
      * - until
        - LocalDate
        - Дата окончания действия календаря.
      * - enabled
        - Boolean
        - Активен ли календарь.
      * - dates
        - List<WorkingCalendarDay>
        - Список дней календаря.

**WorkingCalendarDay** содержит следующие поля:

.. list-table:: 
      :widths: 10 10 10
      :header-rows: 1

      * - ID
        - Тип 
        - Описание
      * - date
        - LocalDate
        - Конкретная дата или дата начала диапазона если задано значение until.
      * - until
        - LocalDate
        - Дата окончания диапазона (включительно).
      * - type
        - String
        - | Тип даты или всех дат в диапазоне. 
          | Допустимые типы: 
             
             * WORKING - рабочий день. Имеет смысл указывать  когда выходной день становится рабочим.
             * HOLIDAY - праздник
             * SHORTDAY - сокращенный на 1ч рабочий день 
             * WEEKEND - выходной
             * NON_WORKING - не рабочий день
      * - description
        - MLText
        - Описание дня или диапазона.

Рабочее расписание
~~~~~~~~~~~~~~~~~~~~~

Определяет обычный распорядок рабочих дней.

Журнал: http://localhost/v2/admin?journalId=type$working-schedule&type=JOURNAL

Атрибуты:

.. list-table:: 
      :widths: 10 10 10
      :header-rows: 1

      * - ID
        - Тип 
        - Описание
      * - id
        - String
        - Идентификатор.
      * - name
        - MLText
        - Имя расписания.
      * - type
        - String
        - Тип расписания. Сейчас поддерживается только weekly.
      * - config
        - ObjectData
        - Конфигурация для типа расписания.

Конфигурация расписания для типа weekly:

.. list-table:: 
      :widths: 10 10 10
      :header-rows: 1

      * - ID
        - Тип 
        - Описание
      * - workingDayStart
        - LocalTime
        - Начало рабочего дня.
      * - workingDayEnd
        - LocalTime
        - Завершение рабочего дня.
      * - workingDayTimeZone
        - ZoneId
        - Часовой пояс рабочего дня.
      * - workdays
        - List<DayOfWeek>
        - Список рабочих дней.
      * - workingCalendar
        - EntityRef
        - Ссылка на производственный календарь.

Records API в браузере
-----------------------

Добавить рабочее время
~~~~~~~~~~~~~~~~~~~~~~

.. code-block::

    await Records.queryOne({
        sourceId: 'emodel/working-schedule-action',
        query: {
            type: 'add-working-time',
            config: {date: '2023-03-05T14:00:00', time: '10h'},
            query: {}
        }
    }, "data")

Результат:

.. code-block::

    '2023-03-07T11:00'

Добавить рабочие дни
~~~~~~~~~~~~~~~~~~~~~~

.. code-block::

    await Records.queryOne({
        sourceId: 'emodel/working-schedule-action',
        query: {
            type: 'add-working-days',
            config: {date: '2023-03-05', days: 10},
            query: {}
        }
    }, "data")

Результат:

.. code-block::

    '2023-03-21'

Рассчитать количество рабочих дней между двумя датами
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block::

    await Records.queryOne({
        sourceId: 'emodel/working-schedule-action',
        query: {
            type: 'get-working-days',
            config: {from: '2023-03-05', to: '2023-03-21'},
            query: {}
        }
    }, "data")

Результат:

.. code-block::

    '11'

Рассчитать количество рабочих дней между двумя датами с временем
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block::

    await Records.queryOne({
        sourceId: 'emodel/working-schedule-action',
        query: {
            type: 'get-working-time',
            config: {from: '2023-03-05', to: '2023-03-21'},
            query: {}
        }
    }, "data")

Результат:

    'PT80H'

Во всех запросах есть поле query, которое может иметь следующие поля:

.. list-table:: 
      :widths: 10 10 10
      :header-rows: 1

      * - ID
        - Тип 
        - Описание
      * - user
        - String
        - | Пользователь для которого нам нужно найти рабочее расписание. 
          | Если расписание для пользователя не найдено, то берется DEFAULT.
      * - group
        - String
        - | Группа для которой нам нужно найти рабочее расписание. 
          | Если расписание для группы не найдено, то берется DEFAULT.
      * - scheduleId
        - String
        - | Идентификатор конкретного рабочего расписания. 
          | Если задан, то user и group игнорируются.
      * - timeZone
        - ZoneId
        - | Часовой пояс для выполнения расчетов. 
          | Если не задан, то берется из настроек пользователя или используется UTC по умолчанию.