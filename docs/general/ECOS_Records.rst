.. _Records_API:

ECOS Records API
=================

**Полезные ссылки**

:ref:`Использование Records API в браузере<using_in_browser>` и :ref:`CRUD операции<CRUD_records_api>`

:ref:`Взаимодействие на сервере<java_kotlin_backend>` и `Исходный код kotlin/java движка Records API <https://github.com/Citeck/ecos-records>`_

**Общее описание**

API, разработанное для организации простого и легко масштабируемого общения между потребителем информации и источником. Источниками данных могут быть БД, REST и др.

Преимущества:

 * Единый API для доступа к данным в системе для всех потребителей (Браузер, Мобильное приложение, Система построения отчетов, Индексирование данных, Различные микросервисы и т.д.);
 * Поддержка загрузки данных из связанных сущностей. Например, если у нас договор ссылается на доверенность, то, имея идентификатор договора, мы можем получить любой атрибут связанной доверенности;
 * Оптимальность. Загружаются и вычисляются только те атрибуты, которые нужны потребителю;
 * Простота в разработке – разработчик источника данных описывает все атрибуты, которые могут запросить потребители вне зависимости от сложности их вычисления. Потребитель в запросе указывает только те атрибуты, в которых он заинтересован;
 * Простота поддержки - нет версионирования API т.к. мы в любой момент можем добавлять новые атрибуты, не трогая старые;
 * Тип получаемых данных полностью описывается запросом. Из источника данных мы возвращаем атрибуты с любым типом, а Records API приводит их к нужному для потребителя;
 * Вычисляемые атрибуты. Возможность добавлять атрибуты, которые не хранятся в БД или любом другом хранилище, а вычисляются на основе существующих;
 * Поддержка объединения атрибутов из разных источников. Например, можно написать источник данных, который часть атрибутов будет брать из alfresco, а часть из внешней БД объединяя их по идентификатору.

.. note::

  ECOS Records API - это **НЕ GraphQL**. Старые версии Records API использовали GraphQL, но начиная с версии 3.0 API полностью самостоятелен.


.. toctree::
    :maxdepth: 2
 
    ECOS_Records/records_intro
    ECOS_Records/attributes
    ECOS_Records/RecordsService
    ECOS_Records/RecordRef
    ECOS_Records/using_in_browser
    ECOS_Records/java_kotlin_backend
    ECOS_Records/records_syntax
    ECOS_Records/ECOS_Records_examples

