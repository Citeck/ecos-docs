===================================
**Роли и статусы**
===================================

Роли
----

Для работы с ролями кейса следует использовать сервис CaseRoleService. Список методов можно посмотреть в интерфейсе и в JS реализации CaseRoleServiceJS. В javascript контексте данный сервис доступен по имени **“caseRoleService”**. Javascript реализация в качестве представителей роли может принимать Authority Name, ScriptNode или NodeRef.

Создание и настройка ролей
~~~~~~~~~~~~~~~~~~~~~~~~~~
.. list-table:: Справочник ролей
      :widths: 15 15 30
      :header-rows: 1

      * - Название поля
        - Тип поля
        - Описание
      * - code
        - d:text
        - Код роли. Используется в вычислениях и должен быть на английском языке.
      * - description
        - d:mltext
        - Описание роли
      * - name
        - d:mltext
        - Название роли, которое видит пользователь
      * - originalRole
        - ассоциация
        - Связь между скопированной ролью и ее оригиналом в справочнике. Не отображается пользователю.

Данный справочник содержит все предопределенные роли для кейса.

Виды ролей
~~~~~~~~~~
* Стандартная роль (icaseRole:role) - роль, представители которой выбираются редактором кейса вручную или посредством внешнего влияния (например - js действие которое добавляет человека в роль).

* Javascript роль (icaseRole:scriptRole) - роль, представители которой вычисляются посредством выполнения javascript скрипта. Возвращаемое значение может быть или NodeRef, Authority Name, ScriptNode или массивом в котором лежат любые упомянутые значения. Уровень вложенности массивов не играет роли. Из возвращенного значения выбираются все уникальные элементы и назначаются в роль. Если какое-то из значений массива null или undefined, то это значение игнорируется. В контексте скрипта доступны следующие объекты: document - ScriptNode кейса. role - ScriptNode роли. Если при выполнении скрипта произошла ошибка, то это равнозначно тому, что скрипт вернул 0 элементов.
Корректные варианты скрипта (на каждой строчке новый скрипт)::

 “admin”
 “GROUP_ALFRESCO_ADMINISTRATORS”
 [“admin”, “GROUP_ALFRESCO_ADMINISTRATORS”]
 document.assocs[‘ns:initiator’]
 [document.assocs[‘ns:initiator’], document.assocs[‘ns:owner’]]
 [document.assocs[‘ns:initiator’], “admin”]

На данный момент в интерфейсе нету возможности создать javascript роль, но можно изменить тип уже созданной роли или в js консоли (icaseRole:scriptRole наследуется от icaseRole:role) или в xml шаблоне кейса (роли расположены в самом конце шаблона и в одном из свойств указан их тип).

Зарегистрированные Policy
~~~~~~~~~~~~~~~~~~~~~~~~~
* OnRoleAssigneesChangedPolicy
void onRoleAssigneesChanged(NodeRef roleRef, Set<NodeRef> added, Set<NodeRef> removed);

Вызывается когда представители роли изменяются. В числе параметров - ссылка на роль, список добавленных представителей, список удаленных представителей. Все параметры гарантированно не null. Коллекции неизменяемые.

* OnCaseRolesAssigneesChangedPolicy
void onCaseRolesAssigneesChanged(NodeRef caseRef);

Вызывается когда представители любых ролей в кейсе меняются. Данное событие удобно когда надо сделать общее действие для всех измененных ролей в кейсе и делать его при каждом вызове onRoleAssigneesChanged может быть затратно.

Назначение ролей из оргструктуры
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Статусы
-------

Для управления статусами кейса существует сервис CaseStatusService
Каждый статус представлен в репозитории как нода с которой у кейса создается ассоциация 
icase:caseStatusAssoc

Создание  и настройка статусов
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. list-table:: Справочник статусов документа
      :widths: 15 15 30
      :header-rows: 1

      * - Название поля
        - Тип поля
        - Описание
      * - code
        - d:text
        - Код статуса. Используется в вычислениях и должно быть на английском языке.
      * - description
        - d:mltext
        - Описание для статуса
      * - name
        - d:mltext
        - Название статуса, которое видит пользователь

Перевод статусов
~~~~~~~~~~~~~~~~~~~~~~~~~

Время изменения записывается в свойство *icase:caseStatusChangedDateTime*

Новый статус доступен по ассоциации *icase:caseStatusAssoc*

Предыдущий статус доступен по ассоциации *icase:caseStatusBeforeAssoc*
