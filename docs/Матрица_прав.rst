**Матрица прав**
================

В версии ECOS 4.0.0 добавлен новый формат настроек прав на документ и его атрибуты. 

Полезные ссылки: *Язык предикатов*

Основная логика находится в библиотеке ecos-model-lib.
Конфигурация прав хранится в микросервисе ecos-model 

	**Модель описания прав**
        ----------------------------

::

	>>> TypePermsDef <<<
	 id: String // Идентификатор настроек. Уникальный в пределах системы
	 typeRef: RecordRef // Тип ECOS, к которому относятся настройки прав
	 permissions: PermissionsDef // Настройка прав на документ
	 attributes: Map<String, PermissionsDef> // Настройка прав на атрибуты

::
	>>> PermissionsDef <<<
	 matrix: Map<String, Map<String, PermissionLevel>> // Матрица прав <Роль, <Статус, Уровень_прав>>. 
	 rules: List<PermissionRule> // Дополнительные правила для гибкой настройки 

::
	>>> PermissionLevel (enum) <<<
	 NONE // нет прав
	 READ // права на чтение
	 WRITE // права на чтение и запись

::
	>>> PermissionRule <<<
	 roles: Set<String> // Роли, для которых применяется правило
	 permissions: Set<String> // Список прав
	 statuses: Set<String> // Статусы, в которых данное правило применимо. Пустой список - любой статус
	 condition: Predicate // Условие, по которому данное правило применимо в формате предиката (см. Язык предикатов).
	 type: RuleType // Тип правила

	>>> RuleType (enum) <<<
	 ALLOW - разрешение. Если правило активно, то permissions добавляются для указанных ролей
	 REVOKE - отбирание прав. Если правило активно, то permissions убираются из списка уже существующих прав у ролей


	**Вычисление прав**
	----------------------
Вычисление прав для PermissionsDef (документа или атрибута) делится на два этапа:

Применение матрицы прав <Роль, <Статус, Уровень_прав>>

Есть 3 уровня прав: NONE (нет прав), READ (чтение), WRITE (чтение и запись)

   2. Применение правил

Правила нужны в случаях, когда логика распределения прав не укладывается в простую матрицу. 

Примеры: 

если есть 2 состояния документа в одном статусе, но с разными правами;

если уровень прав зависит от атрибутов документа.

Значения, которые вычисляются на этапах 1 и 2 должны быть абсолютными. Т.е. если у нас есть конфигурация прав, то она на 100% описывает текущий уровень прав и не предполагает наличие дополнительных механизмов.

Роли и статусы берутся из конфигурации типа. Если какой-то роли или статуса нет в конфигурации типа, то наличие этих сущностей в конфиге прав игнорируется.

Если для роли, статуса или атрибута нету настройки прав, но они присутствуют в типе, то по умолчанию выставляется право только на чтение.

Если у документа выставлен статус или есть роль, которые отсутствуют в конфиге типа, то права для них по умолчанию пустые (нет возможности даже читать).

	**Настройка прав**
	---------------------------
Настройка прав осуществляется на форме редактирования типа во вкладке “Модель”. Редактор будет доступен только в Enterprise поставке ECOS'а

	**Пример конфигурации**
	------------------------------
::
	id: "2a5c3f00-06d5-4b62-8192-1b9116f12db4"
	typeRef: "emodel/type@contracts-cat-doctype-contract"
 
 permissions:
 
  matrix:
    confirmers:
      approval: WRITE
      reworking: NONE
    initiator:
      approval: READ
      reworking: WRITE
    scan-man:
      approval: WRITE
      reworking: NONE
  rules: []
 
 attributes:
 
  cm:name:
    matrix:
      confirmers:
        approval: WRITE
        reworking: NONE
      initiator:
        approval: READ
        reworking: WRITE
      scan-man:
        approval: WRITE
        reworking: NONE
    rules: []
 
  cm:title:
    matrix:
      confirmers:
        approval: WRITE
        reworking: NONE
      initiator:
        approval: READ
        reworking: WRITE
      scan-man:
        approval: WRITE
        reworking: NONE
    rules: []
