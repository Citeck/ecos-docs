==============
**Интеграции**
==============

EDI
---

Основные принципы
~~~~~~~~~~~~~~~~~

Интеграция с ЭДО провайдерами, как уже писалось в других статьях на эту тему, построена на стандартном для микросервиса интеграций механизме - синхронизациях :ref:`ECOS Synchronization <ecos-Synchronization>`. Это для нас означает, что у нас есть простой способ управлять состоянием интеграции с конкретным ЭДО провайдером в рамках настроенного ящика в ECOS посредством уже готового функционала (включение/выключение чекбоксами, сброс состояния при необходимости для старта интеграции с самого начала и тд).

Перейдем к описанию самого функционала с указанием классов.

ECOS синхронизации работают на механизме объявления реализации SyncExecutionFactory, которые поставляют реализации SyncExecution, в котором уже происходит шедулинг интеграции.

В нашем случае, за это ответственны классы EdiSyncExecutionFactory и EdiSyncExecution. Работу EdiSyncExecutionFactory рассматривать не будем, так как кроме регистрации в SyncService и создания EdiSyncExecution - никакой работы он и не делает.

Рассмотрим работу EdiSyncExecution:

* Зашедулить джобу по настройкам.
* В джобе - повесить лок с помощью ShedLock. Если смог повесить лок - работа продолжается.
* Собирает данные для интеграции, ищет зарегистрированную для ЭДО-провайдера из настроек ящика реализацию интерфейса EdiEventsSyncService. Если не находит - сыпет исключения. Важно отметить, что реализаций EdiEventsSyncService в самом микросервисе integrations на самом деле нет, как они подключаются будет описано в разделе ниже.
* Делегирует работу найденному EdiEventsSyncService, передавая ему собранные ранее данные + метод-колбек для обновления состояния синхронизации.

То есть, по факту, особой работы EdiSyncExecution не делает, полезная работа выполняется за счет делегирования.

Связь сервисов-реализации с EdiSyncExecution для интеграции
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Ответ довольно прост, существует общая либа *ecos-edi-commons*, в которую вынесены основные интерфейсы интеграции и структуры данных. Таким образом, удается связать решение на уровне интерфейсов (то есть, связь такая, что интерфейс используется в микросервисе integrations, а реализация идет в сторонних либах).

Ок, с этим разобрались, что-то реализуется, а как микросервис то получит это, если он этих зависимостей даже не имеет? Тут ответ уже сложнее. Решение основано на загрузке кода библиотек в микросервис в виде OSGi бандлов. Для более подробного изучения этого - можно почитать статью Функционал загрузки `OSGI пакетов <https://https://www.google.com/>`_ (и рекомендованные статьи), а так же пример загрузки либы контур для этих целей - `Настройка получения событий с ящиком Контур_Диадок <https://https://www.google.com/>`_ 

Рассмотрим что именно за интерфейсы и сервисы определены в ecos-edi-commons либе:

* EdiEventsSyncService - интерфейс, в который делегируется вся интеграция с ЭДО-провайдером.
* EdiEventsSyncServiceResolver - класс, в котором регистрируются EdiEventsSyncService по связке “ЭДО-провайдер - Сервис” при загрузке бандла, предназначенного для интеграции с каким-то ЭДО-провайдером. Содержится в микросервисе в виде бина.
* EdiBoxService - интерфейс для получения информации о ящике. Расширяется в основном коде микросервиса в виде бина.
* EdiApiService - интерфейс для общения с ЭДО провайдером. Содержит методы для всех операций с ЭДО (или почти все).
* EdiApiServiceResolver - класс, в котором регистрируются EdiApiService по связке “ЭДО-провайдер - Сервис” при загрузке бандла, предназначенного для интеграции с каким-то ЭДО-провайдером. Содержится в микросервисе в виде бина.
* EdiService - Класс, который содержит те же методы, что и в EdiApiService, за исключением того, что в каждый метод дополнительно передается параметр EdiProviderType. По сути, является композитным EdiApiService. Делегирует логику в конкретный EdiApiService, полученный по связке с EdiProviderType из EdiApiServiceResolver.
* EdiGenerator + дочерние интерфейсы - интерфейсы для расширения возможностей генерации контента в ЭДО провайдерах. К примеру, может быть 2 реализации генерации печатной формы: через вызов API генерации ПФ в сервисах диадока (удаленная генерация) или генерация силами ECOS (локальная). Регистрируется в EdiGeneratorResolver.
* EdiGeneratorResolver - класс для регистрации EdiGenerator реализаций по составному ключу “Эдо-провайдер+Тип-генератора+вид-генератора”, где Эдо-провайдер - Контур или Корус, Тип генератора - Генерация печатной формы или Генерация титула покупателя, Вид генератора - Произвольная строка с символизирующая вид. Обычно, что то вроде “локальная генерация” или “генерация по API”.
* EdiStateService - Сервис для отправки событий на обработку после получения и первичной обработки их в либе (будет рассмотрено ниже).
  
Примерное взаимодействие сервисов можно изучить подробнее на `drawIO <https://app.diagrams.net/>`_ диаграмме:

`edi_services <https://docs.google.com/document/d/1OPjXLsTkOio4ikiG_a2d7aas_0W6fUrIbDGyNKA2uyY/edit?usp=sharing>`_

Что происходит в либах обработки и что за зверь - EdiStateService
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Либы не обрабатывают события. Они их получают исходя последнего обработанного события (хранящегося в состоянии синхронизации), составляют универсальную структуру Event, хранящуюся в либе *ecos-edi-commons* и после этого отправляет эту структуру в EdiStateService.

Структуры в *ecos-edi-commons* можно посмотреть в следующей диаграмме `drawIO <https://app.diagrams.net/>`_ :

`edi_structures <https://docs.google.com/document/d/1zWTdASmNCthb7vuQkwz1ocGGUTYzKlldM1hXl1JdALQ/edit?usp=sharing>`_

EdiStateService - это класс в ecos-edi-commons, который отправляет события по определенному endpoint внутри camel контекста. CamelContext отправителя и CamelContext получателя события - это, как правило, разные контексты. Подобная передача осуществляется использованием эндпоинта direct-vm типа, а не простого direct.

Таким образом, происходит следующее взаимодействие:

.. image:: _static/integration_EDI_1.png
	:align: center
	:alt: Integration EDI

, где указано по шагам:

1 - Отправляется запрос выполнить интеграцию через Контур (или иной другой вариант ЭДО-провайдера), для какого-то ящика, от такого то события (вызов EdiEventsSyncService).

2 - В случае найденных событий - трансформирует их в структуру Event и через EdiStateService отправляет сообщение в Camel из контекста Camel микросервиса интеграций.

3 - Camel контекст микросервиса интеграций отправляет сообщение с Event в CamelContext внутри VM, в котором зарегистрирован указанный эндпоинт. На скриншоте указано, что мы используем еще какой-то customer-lib со своим camel контекстом, но такая кастомизация нужна не всегда, в общем случае - будет использоваться сразу переход в ecos-lib.

4 - После выполнения каких-то работа в customer-lib роутах - они отправляют сообщение в CamelContext либы ecos-lib. Там происходит обновление документов, подписей и тд в альфреско путем вызовов Records API.

Стоит уточнить еще раз, customer-lib и ecos-lib - отдельные OSGi бандлы, включенные в микросервис после его старта, которые создают и стартуют Camel контекст, на роутах которого возложена связь между ними. Обязательно нужно соблюдать контракт по именованию endpoint. 

Структура Event
~~~~~~~~~~~~~~~

Не совсем так. Нет, я не имею ввиду, что Event - это какая-то хитрая структура. Это обычный POJO, с сеттерами, геттерами, equals и тд.
Однако, заполнение Event носит определенный характер. Внутри него ДОЛЖНЫ содержаться все документы, состояния которых изменены в рамках данного события.
Это означает, что если обрабатываем событие “Документ подписан”, то это означает, что должна прийти не просто подпись, а еще и информация о документе с АКТУАЛЬНЫМ статусом.
Другая ситуация, если по документу типа УПД пришла корректировка УКД - это означает, что в рамках этого события придет не только УКД, но и информация о текущем новом состоянии УПД (только статус).
Неизменившиеся поля, вроде контента или основанных на контенте формализованных атрибутах, которые могут быть тяжелыми при транспортировании - опускаются.

.. _ecos-Synchronization:

ECOS Synchronization
--------------------
В микросервисе ecos-integrations добавлена поддержка выгрузки нод альфреско в таблицу базы данных. На данный момент выгрузка осуществляется в таблицы БД микросервиса ecos-integrations.

Команда для подключения к БД на стенде с контейнерами докера::

 /usr/bin/psql postgres://integrations@localhost:15432/integrations

Параметры для подключения к alfresco по REST::

 ecos-integrations:
    alfresco:
        url: http://ecos:8080
        authentication:
            username: integrations
            password: 97qiow104UIG

Можно менять эти настройки на стендах или оставить как есть (будет работать только если ECOS развернут в той же докер сети под именем "ecos").

На стороне alfresco для микросервиса должна быть заведена учетная запись integrations с паролем 97qiow104UIG (значения по-умолчанию) и админскими правами.

Скрипт для создания пользователя::

 var userName = "integrations";
 people.createPerson(userName, userName, userName, userName + "@ecos.ru", "97qiow104UIG", true);
 var adminsGroup = groups.getGroup("ALFRESCO_ADMINISTRATORS");
 adminsGroup.addAuthority(userName);

Чтобы настроить выгрузку нод необходимо на стенде с ecos-enterprise-repo модулем открыть системные журналы в alfresco и найти там журнал Синхронизация (Synchronization):

.. image:: _static/integration_synchronization_1.png
	:align: center
	:alt: Integration Sync

* title - заголовок синхронизации
* description - описание синхронизации
* type - тип синхронизации (пока доступен только 1 тип - alfrescords (выгрузка нод альфреско))
* enabled - включена или нет синхронизация

В журнале можно создать новую выгрузку двумя способами:

1) Создание с помощью полей формы (удобно для создания "с нуля")
2) Создание с вводом json (удобно для переноса конфигурации между серверами)

.. image:: _static/integration_synchronization_2.png
	:align: center
	:alt: Intergration Sync2


Создание с помощью формы выглядит следующим образом:

.. image:: _static/integration_synchronization_3.png
	:align: center
	:alt: Integration Sync3

* Title - Заголовок выгрузки. Нужен для отображения в журнале синхронизации
* Description - Описание выгрузки. Следует заполнить это поле чтобы другие люди могли сразу понять предназначение выгрузки.
* Enabled - Включить/выключить синхронизацию;
* Reset state - Сбросить состояние (выгрузка начнется с самого начала)
* Config - Раздел с конфигурацией выгрузки
* Filter type - Тип фильтра, по которому будут выбираться ноды для выгрузки. На момент написания статьи доступно два типа:
	* **ECOS Type/Kind** - фильтрация происходит по выбраному типу и виду
	* **Raw Predicate** - фильтрация происходит по заданному предикату в формате JSON. Синтаксис предикатов можно посмотреть здесь Select Journal
* Target table - Имя таблицы для выгрузки. В базе данных к этому имени прибавится префикс **ecos_sync_** чтобы исключить случайные изменения системных таблиц.
* Attributes - Выгружаемые аттрибуты. Слева описываются названия колонок в результирующей таблице, а справа выгружаемые аттрибуты. Синтаксис аттрибутов в правой колонке используется из Records API. Т.о. можно выгружать вложенные аттрибуты.

Например, для выгрузки статуса договора можно описать следующие аттрибуты::

 {
 "status_id": "icase:caseStatusAssoc?id", //нодреф статуса
 "status_ru": "icase:caseStatusAssoc.cm:title.ru", //заголовок статуса на русском
 "status_en": "icase:caseStatusAssoc.cm:title.en", //заголовок статуса на английском
 }

Если у аттрибута опустить тип скаляра (после знака ?), то по-умолчанию все аттрибуты будут выгружаться в строковом виде. Если требуется числовой вид, то следует добавить к аттрибуту **?num**, а для булева поля **?bool**.

Для полей с датой на данный момент есть возможность их выгрузить в виде строки с форматом ISO8601 (это происходит автоматически и дополнительной настройки для этого не нужно).

Подробнее о синтаксисе аттрибутов можно почитать в соответствующей статье **ECOS Records API** (Общая база знаний).

Изменение синхронизации "на лету"
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Настройку синхронизации можно менять без перезагрузки сервера. При этом есть несколько особенностей:

1) Новые аттрибуты будут появляться только для заявок, которые изменились с момента изменения конфигурации. Для того чтобы новые аттрибуты появились у всех записей можно воспользоваться двумя способами:

Первый - сбрасываем состояние синхронизации и недостающие данные синхронизируются полностью.

Второй - создаем новую конфигурацию с недостающими атрибутами(которые были добавлены в исходную конфигурацию) и устанавливаем в ней ту же таблицу что и в исходной конфигурации. Когда новая конфигурации догонит старую, новую можно будет удалить.

2) При удалении аттрибутов таблица не чистится. То что уже синзронизировано остается в таблице.

3) Изменение типа колонки на данный момент не поддерживается. Т.о. следует создать новый аттрибут если есть такая необходимость, а старый удалить из конфигурации. Для миграции старых записей можно воспользоваться рекоментациями из п.1

Перенос конфигурации между стендами
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.. image:: _static/integration_synchronization_4.png
	:align: center
	:alt: Integration Sync4

Затем нужно:

1) Скопировать содержимое этого файла
2) перейти на целевой стенд
3) открыть журнал синхронизации
4) Нажать Создать → Import JSON
5) В появившемся окне вставить json, который мы скопировали в п.1
6) Сохранить форму
7) Обновить содержимое журнала

.. image:: _static/integration_synchronization_5.png
	:align: center
	:alt: Itegration Sync5

Структура таблицы с данными
~~~~~~~~~~~~~~~~~~~~~~~~~~~
**id** (SERIAL PRIMARY KEY) - идентификатор строки,
**_modified** (TIMESTAMPTZ) - дата последнего изменения строки,
**_created** (TIMESTAMPTZ) - дата создания строки,
**_version** (BIGINT) - внутренняя версия записи. Используется, чтобы избежать одновременного изменения из раных потоков или инстансов микросервиса.
**modified** (VARCHAR) - дата изменения, записи в alfresco в ISO8601,
**record_ref** (VARCHAR) - alfresco@ + nodeRef заявки в alfresco

- все поля, которые описаны в интерфейсе
  
Пример скрипта для просмотра существующих записей в alfresco, для просмотра данных которые пойдут в таблицу интеграции
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Часть с атрибутами можно взять из json конфигурации интеграции, поле "attributes"::

	Citeck.Records.query({
	query: 'tk:type:"workspace://SpacesStore/type-unilever-te-request"',
	language: 'fts-alfresco',
	consistency: 'EVENTUAL',
	page: {
	maxItems: 100
	}
	}, {
	"Reg Number": "uterm:terRegNumber",
	"Expense Type": "uterm:terExpenseType.utedm:teetName",
	"RP": "uterm:reportablePerson",
	"RP Cost Center ": "uterm:terRPCostCenter",
	"OS GRC Code": "uterm:terOrdSignCRGCode.cm:title",
	"RP Vendor Code": "uterm:terRPVendorCode",
	"RP ID": "uterm:terRPPersonnelNumber",
	"RP Sub Function": "uterm:terRPSubFunction.udm:subFunctionName",
	"AR Approve Date": "uterm:terAdvRepApproveDate",
	"OS Date": "uterm:terOrdSignDate",
	"Status": "icase:caseStatusAssoc.cm:title",
	"Line Manager": "uterm:terLineManager",
	"Accountant": "uterm:terAccountant",
	"OS Goal Travel": "uterm:terOrdSignGoalTravelType.cm:title",
	"OS Outsider Goal Travel": "uterm:terOrdSignOutsiderGoalTravelType.cm:title",
	"OS Travel Begin Date": "uterm:terOrdSignTravelBeginDate",
	"OS Travel End Date": "uterm:terOrdSignTravelEndDate",
	"OS Destination City": "uterm:terOrdSignDestinationCity",
	"OS Diff Destination Point": "uterm:terOrdSignDiffDestinationPoint",
	"OS Hotel Required": "uterm:terOrdSignHotelRequired.cm:title",
	"OS Ticket Required": "uterm:terOrdSignTicketRequired",
	"OS Tickets": "uterm:terOrdSignTicketsTable.uterm:tertTransportType",
	"AR Doc Requester Amount": "uterm:terAdvRepDocRequesterAmount",
	"AR Currency": "uterm:terAdvRepCurrency.idocs:currencyName"
	}).then(console.log);

"Reg Number" - key (Attributes),
"uterm:terRegNumber" - value (Attributes)

Восстановление потеряных записей
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

**Версия микросервиса: 1.14.0**

На форму добавлен флаг “Run recovery job”. Если он активен, то вместе с основной выгрузкой дополнительно запускается джоба, которая ищет пропущенные записи за последний час. Если такие записи находятся, то происходит запуск восстановления. В процессе восстановления сужается диапазон дат, между которыми найдено отличие. После уменьшения диапазона происходит пересинхронизация найденых в нем записией.

.. important:: значение флага проверяется только при запуске выгрузки (флаг Enabled переключается с False на True) или при перезагрузке микросервиса.

Дата модификации записи сохраняется в поле _rec_modified. Возможно потребуется создание индексов для этого поля, чтобы джоба работала эффективнее (Но все же если поиск будет долгим, то ничего страшного не произойдет. Просто восстановление будет происходить не так быстро).

**Версия микросервиса: 1.18.0**

На форму добавлено поле “Recovery job duration (in hours)”, доступно когда установлен флаг “Run recovery job”. Задает время в часах, за которое будет осуществлятся поиск пропущенных записей (по умолчанию 1 час, ограничение на форме от 1 до 12).

На форму добавлено поле “Reset sync date”, не доступно когда установлен флаг “Reset State”. Задает время старта синхронизации, если указанное время больше текущего времени синхронизации у задачи, то данное изменение не применяется.
