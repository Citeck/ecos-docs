Async data
===========

.. contents::
   :depth: 4

**Запись (record)** - это понятие, которое включает в себя ноду альфреско, но не любая запись является нодой.

 .. image:: _static/async_data/async_data_1.png
       :width: 600
       :align: center

Типы данных
------------

Есть 6 типов данных, которые можно загружать с помощью данного компонента:

1. Record
~~~~~~~~~~~~

Если мы знаем идентификатор какой-то записи (он есть в поле формы или статичен), то мы можем выбрать этот режим.

Для подстановки значений формы в поле **record** можно делать вставки с четыремя фигурными скобками и полем, которое мы хотим подставить ``{{ data.typeField }}``

Для подстановки текущей редактируемой ноды можно использовать ``{{ recordId }}``

В аттрибутах ``ключ`` - это алиас (имя по которому будет храниться значение аттрибута), а ``value`` - это сам аттрибут. Список вариантов значения ``value`` можно посмотреть в ECOS Records [Ссылку разместить]

По умолчанию, при попытке из record'а получить ассоциацию, возвращается её **displayName (cm:title или если нету, то cm:name в простом случае)**. Чтобы получить ссылку на неё, необходимо после указания названия атрибута, поставить постфикс **?assoc**. Пример:

 .. image:: _static/async_data/async_data_2.png
       :width: 400
       :align: center

2. Records Array
~~~~~~~~~~~~~~~~~

Работает по аналогии с режимом **Record**, но применительно к массиву идентификаторов записей.

3. Records Query
~~~~~~~~~~~~~~~~~~~~~~~~

Если мы хотим отправить запрос поиска записей, то можем воспользоваться режимом **RecordsQuery**. Аналог **Citeck.Records.query({...})**, где указывается поисковый запрос (т.е. если нет ссылок на сущности)
В этом режиме есть вычисляемое javascript поле **Query**, в котором нужно на основе данных формы или других данных подготовить запрос для отправки на сервер. Если query не меняется, то новых запросов на сервер не происходит.

Аттрибуты аналогичны режиму **Record**, но они будут запрошены для каждой вернувшейся записи.

Если включен **Single Record** параметр, то в результате будет поиск только одной записи.

Если ссылки на сущности уже есть, то необходимо использовать другой режим. 

4. Ajax
~~~~~~~~~~~~

Данный режим предназначен для запроса произвольных данных по URL.

В этом режиме есть два вычисляемых javascript поля **Query Data** и **Query Result Mapping**.

**Query Data** - поле, результат вычисления которого отправляется в запросе на сервер. Если метод запроса GET, то параметры из **Query Data** будут добавлены в URL. Если метод POST, то в данные попадут в тело запроса.

**Query Result Mapping** - необязательное поле. Если его не заполнить, то в Async Data контроле будет весь результат запроса. Если в данном поле есть дополнительная обработка результата, то итог данной обработки будет записан в значении поля.

5. Custom
~~~~~~~~~~~~

Данный режим предназначен для вычисления любых асинхронных данных.

В этом режиме есть два вычисляемых javascript поля **Sync Data** и **Async Data**.

**Sync Data** - это подготовка данных, которые будут нужны для выполнения **Async Data**.

В **Async Data** можно в ``value`` записать **Promise**, результат выполнения которого будет проставлен в поле.

6. Records Script
~~~~~~~~~~~~~~~~~~

Тоже самое что и **Record** и **Record Array**, с тем отличием что имеется возможность вычислять идентификатор записи. Если идентификатор равен массиву, то отрабатывает как **Records Array** иначе как **Record**.

 .. image:: _static/async_data/async_data_3.png
       :width: 400
       :align: center

Отключение кеша при загрузке атрибутов с сервера
--------------------------------------------------

В режимах **Record, Records Array и Records Script** результат выполнения запроса к серверу кешируется. Для отключения такого кеширования добавлена опция:

 .. image:: _static/async_data/async_data_4.png
       :width: 400
       :align: center

Условия загрузки данных с сервера
----------------------------------

Во вкладке Advanced настраивается частота и условия обновления данных.

 .. image:: _static/async_data/async_data_5.png
       :width: 600
       :align: center

Обновление данных по событиям
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Для реакции на определенные события существуют 2 параметра на вкладке :guilabel:`Advanced`: **Update on** и **Refresh on**.

 .. image:: _static/async_data/async_data_6.png
       :width: 400
       :align: center

На данный момент **Update on** и **Refresh on** выполняют по сути одну функцию и отличаются только событиями на которые они реагируют. Данные параметры можно комбинировать для покрытия большего количества ситуаций.

1. Update on
""""""""""""""""
Данный параметр поддерживает 4 события, в ответ на которые будет произведена загрузка информации:

 .. image:: _static/async_data/async_data_7.png
       :width: 400
       :align: center

* **Any change** – обновлять данные при любом изменении на форме.
  
  * **Update rate, ms** – период проверки обновления формы на изменения в миллисекундах(если в течении этого времени данные формы изменились, то запрос будет один). Таким образом, если этот параметр равен 100, и за последние 100 ms произошло, к примеру, 1000 событий на форме, то данные будут загружены всего 1 раз.

* **Event** – обновлять данные по заданному событию (события можно триггерить кнопкой).
 
  * **Event** – название события, на которое следует реагировать.

* **Once** – загрузить данные единожды при загрузке формы.
* **Disabled** – выключает параметр Update on.

2. Refresh on
"""""""""""""""

Данный параметр имеет всего одно поле для указания элементов формы, которые следует отслеживать.

 .. image:: _static/async_data/async_data_8.png
       :width: 400
       :align: center

Поле поддерживает множественный выбор, так что можно можно выбрать несколько элементов, при обновлении которых будет происходить загрузка данных.

Для выбора элемента начните вводить **Property Name** нужного элемента.

Инициализация события
~~~~~~~~~~~~~~~~~~~~~~~~~
**Async Data Component** при изменении может порождать событие при загрузке своих данных, на которое далее могут реагировать произвольные слушатели.

1. Trigger event on change value
""""""""""""""""""""""""""""""""""
Данное свойство отвечает за создание события при изменении данных. 

 .. image:: _static/async_data/async_data_9.png
       :width: 400
       :align: center

* **Trigger event on change value** – флаг, указывающий на необходимость инициализировать событие при изменении данных компонента.

    * **Event name** – название события, которое будет инициализировано при изменении данных. Может быть абсолютно любым.

По сути, событие – просто именованный сигнал, обеспечивающий взаимодействие компонентов. При получении такого сигнала, компонент, получивший его, обновляется.

Ниже приведен пример условия обновления другого компонента при возникновении события ``event_terLineManDefault`` в **Async Data Component**.

 .. image:: _static/async_data/async_data_10.png
       :width: 400
       :align: center

Условия обновления данных
~~~~~~~~~~~~~~~~~~~~~~~~~~~

После того как было обнаружено какое-либо событие из параметров **Update on** и **Refresh on**, можно также предварительно убедиться, что данные необходимо обновить.

1. Execution condition
"""""""""""""""""""""""

Данный параметр отвечает за проверку необходимости обновления данных после того, как какое-либо необходимое событие было обнаружено.

 .. image:: _static/async_data/async_data_11.png
       :width: 600
       :align: center

**Execution condition** представляет собой разворачивающееся окно javaScript кода. В данное окно вводится проверка необходимости обновления данных.

Можно ввести любое условие, главное присвоить переменной ``value`` результат проверки. Если **value === true** - необходимо загрузить данные с сервера, а если **value === false**, то данные не будут загружены. 