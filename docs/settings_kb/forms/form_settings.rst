=========================
**Настройка компонентов**
=========================
Основные вкладки, используемые для настройки:

1. **Display** Хранит в себе настройки для отображения. Для базовой настройки нужны:

   - **Label (Заголовок)** Должен содержать в себе значение имени свойства из модели, для корректного получения локализации, в формате ``%prefix%:%localName%``. Например: *idocs:initiator*.

   - **Placeholder** Подсказка, которая отображает до начала заполнения поля. Используется в основном для текстовых полей), если необходимо.

   - **Description** Подсказка, которая отображается на форме всегда, в отличие от Placeholder, если необходимо.

   - **Tooltip** Подсказка, которая отображается при наведении курсора на знак вопроса возле поля, если необходимо.

   - **Multiple Values** Отвечает за возможность множественного выбора (нужно для выбора из списка, журнала, или оргструктуры).

   - **Clear Value When Hidden** Отвечает для очистку данных в компоненте, когда она скрыта.

   - **Disabled** Отключает возможность ввода данных в компонент.
  

2. **Data**. Отвечает за автоматическое заполнение поля данными. В списках, есть возможность заполнить список статическими, или полученными из асинхронного запроса данными.
   

3. **Validation**. Отвечает за проверку правильности заполнения поля. Поддерживает как простые проверки, в духе проверок длинны введенной строки, или принятия конкретного значения, так и сложные.


4. **API**. Хранит в себе ключ и атрибут для корректного сохранения данных. Необходимо заполнить следующие поля:

   - **Property Name** Ключ свойства. Должен содержать в себе такие же данные, как и заголовок, но в формате ``%prefix%_%localName%``. Например: *idocs_initiator*.

   - **Custom Properties** Сопоставление атрибуту. Необходимо создать одну запись. В поле Key ввести строку attribute, а в Value ввести данные как в заголовке ``%prefix%_%localName%``. Например: *idocs:initiator*


5. **Conditional**. Отвечает за настройку отображения компонента. Поддерживает как простую логику, в духе сопоставления значения поля и отображения при совпадении, так и сложную.

6. **Logic**. Пользовательская логика. Поддерживает автовычисления большого количества свойств компонента.